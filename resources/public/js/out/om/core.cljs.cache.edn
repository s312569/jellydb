;; Analyzed by ClojureScript 1.7.170
{:use-macros {allow-reads om.core, check om.core}, :excludes #{}, :name om.core, :imports {IdGenerator goog.ui.IdGenerator}, :requires {dom om.dom, om.dom om.dom, IdGenerator goog.ui.IdGenerator}, :uses nil, :defs {set-state-nr! {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 858, :column 7, :end-line 858, :end-column 20, :arglists (quote ([owner v] [owner korks v])), :doc "EXPERIMENTAL: Same as set-state! but does not trigger re-render.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([owner v] [owner korks v]), :arglists ([owner v] [owner korks v]), :arglists-meta (nil nil)}}, :name om.core/set-state-nr!, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([owner v] [owner korks v]), :arglists ([owner v] [owner korks v]), :arglists-meta (nil nil)}, :method-params ([owner v] [owner korks v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 858, :end-line 858, :max-fixed-arity 3, :fn-var true, :arglists ([owner v] [owner korks v]), :doc "EXPERIMENTAL: Same as set-state! but does not trigger re-render."}, get-props {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 142, :column 7, :end-line 142, :end-column 16, :arglists (quote ([x])), :doc "Given an owning Pure node return the Om props. Analogous to React\n   component props."}, :name om.core/get-props, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Given an owning Pure node return the Om props. Analogous to React\n   component props."}, -to-cursor {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 84, :column 4, :end-line 84, :end-column 14, :protocol om.core/IToCursor, :doc nil, :arglists (quote ([value state] [value state path])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([value state] [value state path]), :arglists ([value state] [value state path]), :arglists-meta (nil nil)}}, :protocol om.core/IToCursor, :name om.core/-to-cursor, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([value state] [value state path]), :arglists ([value state] [value state path]), :arglists-meta (nil nil)}, :method-params ([value state] [value state path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 84, :max-fixed-arity 3, :fn-var true, :arglists ([value state] [value state path]), :doc nil}, cursor? {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 133, :column 7, :end-line 133, :end-column 14, :arglists (quote ([x]))}, :name om.core/cursor?, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, INotify {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 108, :column 14, :end-line 108, :end-column 21, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-listen! [[x key tx-listen]], -unlisten! [[x key]], -notify! [[x tx-data root-cursor]]}}}, :protocol-symbol true, :name om.core/INotify, :file "resources/public/js/out/om/core.cljs", :end-column 21, :column 1, :line 108, :protocol-info {:methods {-listen! [[x key tx-listen]], -unlisten! [[x key]], -notify! [[x tx-data root-cursor]]}}, :info nil, :end-line 108, :impls #{om.core/x42315 om.core/x42307}, :doc nil, :jsdoc ("@interface")}, get-node {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 839, :column 7, :end-line 839, :end-column 15, :arglists (quote ([owner] [owner name])), :doc "A helper function to get at React refs. Given a owning pure node\n  extract the ref specified by name.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([owner] [owner name]), :arglists ([owner] [owner name]), :arglists-meta (nil nil)}}, :name om.core/get-node, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([owner] [owner name]), :arglists ([owner] [owner name]), :arglists-meta (nil nil)}, :method-params ([owner] [owner name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 839, :end-line 839, :max-fixed-arity 2, :fn-var true, :arglists ([owner] [owner name]), :doc "A helper function to get at React refs. Given a owning pure node\n  extract the ref specified by name."}, IInitState {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 19, :column 14, :end-line 19, :end-column 24, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {init-state [[this]]}}}, :protocol-symbol true, :name om.core/IInitState, :file "resources/public/js/out/om/core.cljs", :end-column 24, :column 1, :line 19, :protocol-info {:methods {init-state [[this]]}}, :info nil, :end-line 19, :impls #{}, :doc nil, :jsdoc ("@interface")}, get-render-state {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 887, :column 7, :end-line 887, :end-column 23, :arglists (quote ([owner] [owner korks])), :doc "Takes a pure owning component and an optional key or sequential\n   list of keys and returns a property in the component local state if\n   it exists. Always returns the rendered state, not the pending\n   state.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([owner] [owner korks]), :arglists ([owner] [owner korks]), :arglists-meta (nil nil)}}, :name om.core/get-render-state, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([owner] [owner korks]), :arglists ([owner] [owner korks]), :arglists-meta (nil nil)}, :method-params ([owner] [owner korks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 887, :end-line 887, :max-fixed-arity 2, :fn-var true, :arglists ([owner] [owner korks]), :doc "Takes a pure owning component and an optional key or sequential\n   list of keys and returns a property in the component local state if\n   it exists. Always returns the rendered state, not the pending\n   state."}, refresh! {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 882, :column 7, :end-line 882, :end-column 15, :arglists (quote ([owner])), :doc "Utility to re-render an owner."}, :name om.core/refresh!, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 15, :method-params ([owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 882, :end-line 882, :max-fixed-arity 1, :fn-var true, :arglists (quote ([owner])), :doc "Utility to re-render an owner."}, should-update {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 23, :column 4, :end-line 23, :end-column 17, :protocol om.core/IShouldUpdate, :doc nil, :arglists (quote ([this next-props next-state]))}, :protocol om.core/IShouldUpdate, :name om.core/should-update, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 17, :method-params ([this next-props next-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 23, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this next-props next-state])), :doc nil}, refresh-set {:name om.core/refresh-set, :file "resources/public/js/out/om/core.cljs", :line 554, :column 1, :end-line 554, :end-column 27, :private true, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 554, :column 16, :end-line 554, :end-column 27, :private true}}, ICursorDerive {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 86, :column 14, :end-line 86, :end-column 27, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-derive [[cursor derived state path]]}}}, :protocol-symbol true, :name om.core/ICursorDerive, :file "resources/public/js/out/om/core.cljs", :end-column 27, :column 1, :line 86, :protocol-info {:methods {-derive [[cursor derived state path]]}}, :info nil, :end-line 86, :impls #{default}, :doc nil, :jsdoc ("@interface")}, render-state {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 47, :column 4, :end-line 47, :end-column 16, :protocol om.core/IRenderState, :doc nil, :arglists (quote ([this state]))}, :protocol om.core/IRenderState, :name om.core/render-state, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 16, :method-params ([this state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this state])), :doc nil}, render-all {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 556, :column 17, :end-line 556, :end-column 27, :private true, :arglists (quote ([]))}, :private true, :name om.core/render-all, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 556, :end-line 556, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, specify-state-methods! {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 319, :column 7, :end-line 319, :end-column 29, :arglists (quote ([obj]))}, :name om.core/specify-state-methods!, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 29, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 319, :end-line 319, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}, path {:name om.core/path, :file "resources/public/js/out/om/core.cljs", :line 113, :column 1, :end-line 113, :end-column 22, :declared true, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 113, :column 18, :end-line 113, :end-column 22, :declared true}}, ICursor {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 79, :column 14, :end-line 79, :end-column 21, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-path [[cursor]], -state [[cursor]]}}}, :protocol-symbol true, :name om.core/ICursor, :file "resources/public/js/out/om/core.cljs", :end-column 21, :column 1, :line 79, :protocol-info {:methods {-path [[cursor]], -state [[cursor]]}}, :info nil, :end-line 79, :impls #{om.core/x42236 om.core/MapCursor om.core/x42235 om.core/IndexedCursor}, :doc nil, :jsdoc ("@interface")}, -get-queue {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 68, :column 4, :end-line 68, :end-column 14, :protocol om.core/IRenderQueue, :doc nil, :arglists (quote ([this]))}, :protocol om.core/IRenderQueue, :name om.core/-get-queue, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, did-mount {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 29, :column 4, :end-line 29, :end-column 13, :protocol om.core/IDidMount, :doc nil, :arglists (quote ([this]))}, :protocol om.core/IDidMount, :name om.core/did-mount, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, merge-props-state {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 184, :column 17, :end-line 184, :end-column 34, :private true, :arglists (quote ([owner] [owner props])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([owner] [owner props]), :arglists ([owner] [owner props]), :arglists-meta (nil nil)}}, :private true, :name om.core/merge-props-state, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 34, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([owner] [owner props]), :arglists ([owner] [owner props]), :arglists-meta (nil nil)}, :method-params ([owner] [owner props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 2, :fn-var true, :arglists ([owner] [owner props])}, -derive {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 87, :column 4, :end-line 87, :end-column 11, :protocol om.core/ICursorDerive, :doc nil, :arglists (quote ([cursor derived state path]))}, :protocol om.core/ICursorDerive, :name om.core/-derive, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 11, :method-params ([cursor derived state path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 87, :max-fixed-arity 4, :fn-var true, :arglists (quote ([cursor derived state path])), :doc nil}, ISetState {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 61, :column 14, :end-line 61, :end-column 23, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-set-state! [[this val render] [this ks val render]]}}}, :protocol-symbol true, :name om.core/ISetState, :file "resources/public/js/out/om/core.cljs", :end-column 23, :column 1, :line 61, :protocol-info {:methods {-set-state! [[this val render] [this ks val render]]}}, :info nil, :end-line 61, :impls #{om.core/x42223 om.core/x42226}, :doc nil, :jsdoc ("@interface")}, children {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 136, :column 17, :end-line 136, :end-column 25, :private true, :arglists (quote ([node]))}, :private true, :name om.core/children, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 25, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node]))}, IToCursor {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 83, :column 14, :end-line 83, :end-column 23, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-to-cursor [[value state] [value state path]]}}}, :protocol-symbol true, :name om.core/IToCursor, :file "resources/public/js/out/om/core.cljs", :end-column 23, :column 1, :line 83, :protocol-info {:methods {-to-cursor [[value state] [value state path]]}}, :info nil, :end-line 83, :impls #{}, :doc nil, :jsdoc ("@interface")}, -set-state! {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 62, :column 4, :end-line 62, :end-column 15, :protocol om.core/ISetState, :doc nil, :arglists (quote ([this val render] [this ks val render])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([this val render] [this ks val render]), :arglists ([this val render] [this ks val render]), :arglists-meta (nil nil)}}, :protocol om.core/ISetState, :name om.core/-set-state!, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([this val render] [this ks val render]), :arglists ([this val render] [this ks val render]), :arglists-meta (nil nil)}, :method-params ([this val render] [this ks val render]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 62, :max-fixed-arity 4, :fn-var true, :arglists ([this val render] [this ks val render]), :doc nil}, -state {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 81, :column 4, :end-line 81, :end-column 10, :protocol om.core/ICursor, :doc nil, :arglists (quote ([cursor]))}, :protocol om.core/ICursor, :name om.core/-state, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 10, :method-params ([cursor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cursor])), :doc nil}, will-unmount {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 32, :column 4, :end-line 32, :end-column 16, :protocol om.core/IWillUnmount, :doc nil, :arglists (quote ([this]))}, :protocol om.core/IWillUnmount, :name om.core/will-unmount, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, *state* {:name om.core/*state*, :file "resources/public/js/out/om/core.cljs", :line 9, :column 1, :end-line 9, :end-column 44, :dynamic true, :private true, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 9, :column 37, :end-line 9, :end-column 44, :dynamic true, :private true}}, -unlisten! {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 110, :column 4, :end-line 110, :end-column 14, :protocol om.core/INotify, :doc nil, :arglists (quote ([x key]))}, :protocol om.core/INotify, :name om.core/-unlisten!, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 14, :method-params ([x key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 110, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x key])), :doc nil}, set-state! {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 848, :column 7, :end-line 848, :end-column 17, :arglists (quote ([owner v] [owner korks v])), :doc "Takes a pure owning component, a sequential list of keys and value and\n   sets the state of the component. Conceptually analagous to React\n   setState. Will schedule an Om re-render.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([owner v] [owner korks v]), :arglists ([owner v] [owner korks v]), :arglists-meta (nil nil)}}, :name om.core/set-state!, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([owner v] [owner korks v]), :arglists ([owner v] [owner korks v]), :arglists-meta (nil nil)}, :method-params ([owner v] [owner korks v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 848, :end-line 848, :max-fixed-arity 3, :fn-var true, :arglists ([owner v] [owner korks v]), :doc "Takes a pure owning component, a sequential list of keys and value and\n   sets the state of the component. Conceptually analagous to React\n   setState. Will schedule an Om re-render."}, IDidMount {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 28, :column 14, :end-line 28, :end-column 23, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {did-mount [[this]]}}}, :protocol-symbol true, :name om.core/IDidMount, :file "resources/public/js/out/om/core.cljs", :end-column 23, :column 1, :line 28, :protocol-info {:methods {did-mount [[this]]}}, :info nil, :end-line 28, :impls #{}, :doc nil, :jsdoc ("@interface")}, to-cursor {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 534, :column 17, :end-line 534, :end-column 26, :private true, :arglists (quote ([val] [val state] [val state path])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([val] [val state] [val state path]), :arglists ([val] [val state] [val state path]), :arglists-meta (nil nil nil)}}, :private true, :name om.core/to-cursor, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 26, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([val] [val state] [val state path]), :arglists ([val] [val state] [val state path]), :arglists-meta (nil nil nil)}, :method-params ([val] [val state] [val state path]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 534, :end-line 534, :max-fixed-arity 3, :fn-var true, :arglists ([val] [val state] [val state path])}, to-cursor* {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 514, :column 17, :end-line 514, :end-column 27, :private true, :arglists (quote ([val state path]))}, :private true, :name om.core/to-cursor*, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 27, :method-params ([val state path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 514, :end-line 514, :max-fixed-arity 3, :fn-var true, :arglists (quote ([val state path]))}, get-shared {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 158, :column 7, :end-line 158, :end-column 17, :arglists (quote ([owner] [owner korks])), :doc "Takes an owner and returns a map of global shared values for a\n   render loop. An optional key or sequence of keys may be given to\n   extract a specific value.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([owner] [owner korks]), :arglists ([owner] [owner korks]), :arglists-meta (nil nil)}}, :name om.core/get-shared, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([owner] [owner korks]), :arglists ([owner] [owner korks]), :arglists-meta (nil nil)}, :method-params ([owner] [owner korks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 2, :fn-var true, :arglists ([owner] [owner korks]), :doc "Takes an owner and returns a map of global shared values for a\n   render loop. An optional key or sequence of keys may be given to\n   extract a specific value."}, valid? {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 569, :column 17, :end-line 569, :end-column 23, :private true, :arglists (quote ([m]))}, :private true, :name om.core/valid?, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 23, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 569, :end-line 569, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, IndexedCursor {:num-fields 3, :protocols #{om.core/IValue cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection om.core/ITransact cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack om.core/ICursor cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup}, :name om.core/IndexedCursor, :file "resources/public/js/out/om/core.cljs", :end-column 23, :type true, :column 10, :line 434, :record false, :end-line 434, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup}}, IValue {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 72, :column 14, :end-line 72, :end-column 20, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-value [[x]]}}}, :protocol-symbol true, :name om.core/IValue, :file "resources/public/js/out/om/core.cljs", :end-column 20, :column 1, :line 72, :protocol-info {:methods {-value [[x]]}}, :info nil, :end-line 72, :impls #{om.core/MapCursor default om.core/IndexedCursor}, :doc nil, :jsdoc ("@interface")}, ->MapCursor {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 360, :column 10, :end-line 360, :end-column 19, :protocols #{om.core/IValue cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection om.core/ITransact cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable om.core/ICursor cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :factory :positional, :arglists (quote ([value state path]))}, :protocols #{om.core/IValue cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection om.core/ITransact cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable om.core/ICursor cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name om.core/->MapCursor, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 19, :method-params ([value state path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 360, :end-line 360, :max-fixed-arity 3, :fn-var true, :arglists (quote ([value state path])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, IWillUpdate {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 34, :column 14, :end-line 34, :end-column 25, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {will-update [[this next-props next-state]]}}}, :protocol-symbol true, :name om.core/IWillUpdate, :file "resources/public/js/out/om/core.cljs", :end-column 25, :column 1, :line 34, :protocol-info {:methods {will-update [[this next-props next-state]]}}, :info nil, :end-line 34, :impls #{}, :doc nil, :jsdoc ("@interface")}, IRenderQueue {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 67, :column 14, :end-line 67, :end-column 26, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-get-queue [[this]], -queue-render! [[this c]], -empty-queue! [[this]]}}}, :protocol-symbol true, :name om.core/IRenderQueue, :file "resources/public/js/out/om/core.cljs", :end-column 26, :column 1, :line 67, :protocol-info {:methods {-get-queue [[this]], -queue-render! [[this c]], -empty-queue! [[this]]}}, :info nil, :end-line 67, :impls #{om.core/x42315 om.core/x42307}, :doc nil, :jsdoc ("@interface")}, -listen! {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 109, :column 4, :end-line 109, :end-column 12, :protocol om.core/INotify, :doc nil, :arglists (quote ([x key tx-listen]))}, :protocol om.core/INotify, :name om.core/-listen!, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 12, :method-params ([x key tx-listen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 109, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x key tx-listen])), :doc nil}, value {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 99, :column 7, :end-line 99, :end-column 12, :arglists (quote ([cursor]))}, :name om.core/value, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 12, :method-params ([cursor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cursor]))}, get-state {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 148, :column 7, :end-line 148, :end-column 16, :arglists (quote ([owner] [owner korks])), :doc "Returns the component local state of an owning component. owner is\n   the component. An optional key or sequence of keys may be given to\n   extract a specific value. Always returns pending state.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([owner] [owner korks]), :arglists ([owner] [owner korks]), :arglists-meta (nil nil)}}, :name om.core/get-state, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([owner] [owner korks]), :arglists ([owner] [owner korks]), :arglists-meta (nil nil)}, :method-params ([owner] [owner korks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 2, :fn-var true, :arglists ([owner] [owner korks]), :doc "Returns the component local state of an owning component. owner is\n   the component. An optional key or sequence of keys may be given to\n   extract a specific value. Always returns pending state."}, merge-pending-state {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 176, :column 17, :end-line 176, :end-column 36, :private true, :arglists (quote ([owner]))}, :private true, :name om.core/merge-pending-state, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 36, :method-params ([owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 176, :max-fixed-arity 1, :fn-var true, :arglists (quote ([owner]))}, *parent* {:name om.core/*parent*, :file "resources/public/js/out/om/core.cljs", :line 7, :column 1, :end-line 7, :end-column 45, :dynamic true, :private true, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 7, :column 37, :end-line 7, :end-column 45, :dynamic true, :private true}}, update-state! {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 866, :column 7, :end-line 866, :end-column 20, :arglists (quote ([owner f] [owner korks f])), :doc "Takes a pure owning component, a sequential list of keys and a\n   function to transition the state of the component. Conceptually\n   analagous to React setState. Will schedule an Om re-render.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([owner f] [owner korks f]), :arglists ([owner f] [owner korks f]), :arglists-meta (nil nil)}}, :name om.core/update-state!, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([owner f] [owner korks f]), :arglists ([owner f] [owner korks f]), :arglists-meta (nil nil)}, :method-params ([owner f] [owner korks f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 866, :end-line 866, :max-fixed-arity 3, :fn-var true, :arglists ([owner f] [owner korks f]), :doc "Takes a pure owning component, a sequential list of keys and a\n   function to transition the state of the component. Conceptually\n   analagous to React setState. Will schedule an Om re-render."}, build* {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 585, :column 7, :end-line 585, :end-column 13, :arglists (quote ([f cursor] [f cursor m])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f cursor] [f cursor m]), :arglists ([f cursor] [f cursor m]), :arglists-meta (nil nil)}}, :name om.core/build*, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f cursor] [f cursor m]), :arglists ([f cursor] [f cursor m]), :arglists-meta (nil nil)}, :method-params ([f cursor] [f cursor m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 585, :end-line 585, :max-fixed-arity 3, :fn-var true, :arglists ([f cursor] [f cursor m])}, tear-down {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 721, :column 17, :end-line 721, :end-column 26, :private true, :arglists (quote ([state key]))}, :private true, :name om.core/tear-down, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 26, :method-params ([state key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 721, :end-line 721, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state key]))}, *instrument* {:name om.core/*instrument*, :file "resources/public/js/out/om/core.cljs", :line 8, :column 1, :end-line 8, :end-column 49, :dynamic true, :private true, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 8, :column 37, :end-line 8, :end-column 49, :dynamic true, :private true}}, -get-render-state {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 59, :column 4, :end-line 59, :end-column 21, :protocol om.core/IGetRenderState, :doc nil, :arglists (quote ([this] [this ks])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([this] [this ks]), :arglists ([this] [this ks]), :arglists-meta (nil nil)}}, :protocol om.core/IGetRenderState, :name om.core/-get-render-state, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([this] [this ks]), :arglists ([this] [this ks]), :arglists-meta (nil nil)}, :method-params ([this] [this ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists ([this] [this ks]), :doc nil}, -queue-render! {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 69, :column 4, :end-line 69, :end-column 18, :protocol om.core/IRenderQueue, :doc nil, :arglists (quote ([this c]))}, :protocol om.core/IRenderQueue, :name om.core/-queue-render!, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 18, :method-params ([this c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this c])), :doc nil}, IOmSwap {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 52, :column 14, :end-line 52, :end-column 21, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-om-swap! [[this cursor korks f tag]]}}}, :protocol-symbol true, :name om.core/IOmSwap, :file "resources/public/js/out/om/core.cljs", :end-column 21, :column 1, :line 52, :protocol-info {:methods {-om-swap! [[this cursor korks f tag]]}}, :info nil, :end-line 52, :impls #{}, :doc nil, :jsdoc ("@interface")}, valid-component? {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 562, :column 17, :end-line 562, :end-column 33, :private true, :arglists (quote ([x f]))}, :private true, :name om.core/valid-component?, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 33, :method-params ([x f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 562, :end-line 562, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x f]))}, pure-methods {:name om.core/pure-methods, :file "resources/public/js/out/om/core.cljs", :line 196, :column 1, :end-line 196, :end-column 18, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 196, :column 6, :end-line 196, :end-column 18}}, init-state {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 20, :column 4, :end-line 20, :end-column 14, :protocol om.core/IInitState, :doc nil, :arglists (quote ([this]))}, :protocol om.core/IInitState, :name om.core/init-state, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, rendering? {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 898, :column 7, :end-line 898, :end-column 17, :arglists (quote ([])), :doc "Returns true if in the React render phase."}, :name om.core/rendering?, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 898, :end-line 898, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns true if in the React render phase."}, -om-swap! {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 53, :column 4, :end-line 53, :end-column 13, :protocol om.core/IOmSwap, :doc nil, :arglists (quote ([this cursor korks f tag]))}, :protocol om.core/IOmSwap, :name om.core/-om-swap!, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 13, :method-params ([this cursor korks f tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 53, :max-fixed-arity 5, :fn-var true, :arglists (quote ([this cursor korks f tag])), :doc nil}, IWillReceiveProps {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 40, :column 14, :end-line 40, :end-column 31, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {will-receive-props [[this next-props]]}}}, :protocol-symbol true, :name om.core/IWillReceiveProps, :file "resources/public/js/out/om/core.cljs", :end-column 31, :column 1, :line 40, :protocol-info {:methods {will-receive-props [[this next-props]]}}, :info nil, :end-line 40, :impls #{}, :doc nil, :jsdoc ("@interface")}, *read-enabled* {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 6, :column 50, :end-line 6, :end-column 64, :tag boolean, :dynamic true, :private true}, :private true, :name om.core/*read-enabled*, :file "resources/public/js/out/om/core.cljs", :end-column 64, :column 1, :dynamic true, :line 6, :end-line 6, :tag boolean}, state {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 102, :column 7, :end-line 102, :end-column 12, :arglists (quote ([cursor]))}, :name om.core/state, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 12, :method-params ([cursor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cursor]))}, IWillUnmount {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 31, :column 14, :end-line 31, :end-column 26, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {will-unmount [[this]]}}}, :protocol-symbol true, :name om.core/IWillUnmount, :file "resources/public/js/out/om/core.cljs", :end-column 26, :column 1, :line 31, :protocol-info {:methods {will-unmount [[this]]}}, :info nil, :end-line 31, :impls #{}, :doc nil, :jsdoc ("@interface")}, IRender {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 43, :column 14, :end-line 43, :end-column 21, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {render [[this]]}}}, :protocol-symbol true, :name om.core/IRender, :file "resources/public/js/out/om/core.cljs", :end-column 21, :column 1, :line 43, :protocol-info {:methods {render [[this]]}}, :info nil, :end-line 43, :impls #{}, :doc nil, :jsdoc ("@interface")}, update-state-nr! {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 875, :column 7, :end-line 875, :end-column 23, :arglists (quote ([owner f] [owner korks f])), :doc "EXPERIMENTAL: Same as update-state! but does not trigger re-render.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([owner f] [owner korks f]), :arglists ([owner f] [owner korks f]), :arglists-meta (nil nil)}}, :name om.core/update-state-nr!, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([owner f] [owner korks f]), :arglists ([owner f] [owner korks f]), :arglists-meta (nil nil)}, :method-params ([owner f] [owner korks f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 875, :end-line 875, :max-fixed-arity 3, :fn-var true, :arglists ([owner f] [owner korks f]), :doc "EXPERIMENTAL: Same as update-state! but does not trigger re-render."}, ITransact {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 105, :column 14, :end-line 105, :end-column 23, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-transact! [[cursor korks f tag]]}}}, :protocol-symbol true, :name om.core/ITransact, :file "resources/public/js/out/om/core.cljs", :end-column 23, :column 1, :line 105, :protocol-info {:methods {-transact! [[cursor korks f tag]]}}, :info nil, :end-line 105, :impls #{om.core/x42236 om.core/MapCursor om.core/x42235 om.core/IndexedCursor}, :doc nil, :jsdoc ("@interface")}, transact! {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 813, :column 7, :end-line 813, :end-column 16, :arglists (quote ([cursor f] [cursor korks f] [cursor korks f tag])), :doc "Given a tag, a cursor, an optional list of keys ks, mutate the tree\n   at the path specified by the cursor + the optional keys by applying\n   f to the specified value in the tree. An Om re-render will be\n   triggered.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([cursor f] [cursor korks f] [cursor korks f tag]), :arglists ([cursor f] [cursor korks f] [cursor korks f tag]), :arglists-meta (nil nil nil)}}, :name om.core/transact!, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([cursor f] [cursor korks f] [cursor korks f tag]), :arglists ([cursor f] [cursor korks f] [cursor korks f tag]), :arglists-meta (nil nil nil)}, :method-params ([cursor f] [cursor korks f] [cursor korks f tag]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 813, :end-line 813, :max-fixed-arity 4, :fn-var true, :arglists ([cursor f] [cursor korks f] [cursor korks f tag]), :doc "Given a tag, a cursor, an optional list of keys ks, mutate the tree\n   at the path specified by the cursor + the optional keys by applying\n   f to the specified value in the tree. An Om re-render will be\n   triggered."}, roots {:name om.core/roots, :file "resources/public/js/out/om/core.cljs", :line 560, :column 1, :end-line 560, :end-column 21, :private true, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 560, :column 16, :end-line 560, :end-column 21, :private true}}, build-all {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 684, :column 7, :end-line 684, :end-column 16, :arglists (quote ([f xs] [f xs m])), :doc "Build a sequence of components. f is the component constructor\n   function, xs a sequence of cursors, and m a map of options the\n   same as provided to om.core/build.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f xs] [f xs m]), :arglists ([f xs] [f xs m]), :arglists-meta (nil nil)}}, :name om.core/build-all, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f xs] [f xs m]), :arglists ([f xs] [f xs m]), :arglists-meta (nil nil)}, :method-params ([f xs] [f xs m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 684, :end-line 684, :max-fixed-arity 3, :fn-var true, :arglists ([f xs] [f xs m]), :doc "Build a sequence of components. f is the component constructor\n   function, xs a sequence of cursors, and m a map of options the\n   same as provided to om.core/build."}, IRenderState {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 46, :column 14, :end-line 46, :end-column 26, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {render-state [[this state]]}}}, :protocol-symbol true, :name om.core/IRenderState, :file "resources/public/js/out/om/core.cljs", :end-column 26, :column 1, :line 46, :protocol-info {:methods {render-state [[this state]]}}, :info nil, :end-line 46, :impls #{}, :doc nil, :jsdoc ("@interface")}, pure-descriptor {:name om.core/pure-descriptor, :file "resources/public/js/out/om/core.cljs", :line 354, :column 1, :end-line 354, :end-column 21, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 354, :column 6, :end-line 354, :end-column 21}}, get-descriptor {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 577, :column 7, :end-line 577, :end-column 21, :arglists (quote ([f] [f descriptor])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f descriptor]), :arglists ([f] [f descriptor]), :arglists-meta (nil nil)}}, :name om.core/get-descriptor, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f descriptor]), :arglists ([f] [f descriptor]), :arglists-meta (nil nil)}, :method-params ([f] [f descriptor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 577, :end-line 577, :max-fixed-arity 2, :fn-var true, :arglists ([f] [f descriptor])}, did-update {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 38, :column 4, :end-line 38, :end-column 14, :protocol om.core/IDidUpdate, :doc nil, :arglists (quote ([this prev-props prev-state]))}, :protocol om.core/IDidUpdate, :name om.core/did-update, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 14, :method-params ([this prev-props prev-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 38, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this prev-props prev-state])), :doc nil}, setup {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 694, :column 17, :end-line 694, :end-column 22, :private true, :arglists (quote ([state key tx-listen]))}, :private true, :name om.core/setup, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 22, :method-params ([state key tx-listen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 694, :end-line 694, :max-fixed-arity 3, :fn-var true, :arglists (quote ([state key tx-listen]))}, notify* {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 546, :column 7, :end-line 546, :end-column 14, :arglists (quote ([cursor tx-data]))}, :name om.core/notify*, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 14, :method-params ([cursor tx-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 546, :end-line 546, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cursor tx-data]))}, -notify! {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 111, :column 4, :end-line 111, :end-column 12, :protocol om.core/INotify, :doc nil, :arglists (quote ([x tx-data root-cursor]))}, :protocol om.core/INotify, :name om.core/-notify!, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 12, :method-params ([x tx-data root-cursor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 111, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x tx-data root-cursor])), :doc nil}, IDidUpdate {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 37, :column 14, :end-line 37, :end-column 24, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {did-update [[this prev-props prev-state]]}}}, :protocol-symbol true, :name om.core/IDidUpdate, :file "resources/public/js/out/om/core.cljs", :end-column 24, :column 1, :line 37, :protocol-info {:methods {did-update [[this prev-props prev-state]]}}, :info nil, :end-line 37, :impls #{}, :doc nil, :jsdoc ("@interface")}, will-mount {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 26, :column 4, :end-line 26, :end-column 14, :protocol om.core/IWillMount, :doc nil, :arglists (quote ([this]))}, :protocol om.core/IWillMount, :name om.core/will-mount, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, IWillMount {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 25, :column 14, :end-line 25, :end-column 24, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {will-mount [[this]]}}}, :protocol-symbol true, :name om.core/IWillMount, :file "resources/public/js/out/om/core.cljs", :end-column 24, :column 1, :line 25, :protocol-info {:methods {will-mount [[this]]}}, :info nil, :end-line 25, :impls #{}, :doc nil, :jsdoc ("@interface")}, transact* {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 115, :column 7, :end-line 115, :end-column 16, :arglists (quote ([state cursor korks f tag]))}, :name om.core/transact*, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 16, :method-params ([state cursor korks f tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 5, :fn-var true, :arglists (quote ([state cursor korks f tag]))}, detach-root {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 807, :column 7, :end-line 807, :end-column 18, :arglists (quote ([target])), :doc "Given a DOM target remove its render loop if one exists."}, :name om.core/detach-root, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 18, :method-params ([target]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 807, :end-line 807, :max-fixed-arity 1, :fn-var true, :arglists (quote ([target])), :doc "Given a DOM target remove its render loop if one exists."}, -path {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 80, :column 4, :end-line 80, :end-column 9, :protocol om.core/ICursor, :doc nil, :arglists (quote ([cursor]))}, :protocol om.core/ICursor, :name om.core/-path, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 9, :method-params ([cursor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cursor])), :doc nil}, -get-state {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 56, :column 4, :end-line 56, :end-column 14, :protocol om.core/IGetState, :doc nil, :arglists (quote ([this] [this ks])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([this] [this ks]), :arglists ([this] [this ks]), :arglists-meta (nil nil)}}, :protocol om.core/IGetState, :name om.core/-get-state, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([this] [this ks]), :arglists ([this] [this ks]), :arglists-meta (nil nil)}, :method-params ([this] [this ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists ([this] [this ks]), :doc nil}, build {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 641, :column 7, :end-line 641, :end-column 12, :arglists (quote ([f cursor] [f cursor m])), :doc "Builds an Om component. Takes an IRender/IRenderState instance\n   returning function f, a cursor, and an optional third argument\n   which may be a map of build specifications.\n\n   f - is a function of 2 or 3 arguments. The first argument will be\n   the cursor and the second argument will be the owning pure node.\n   If a map of options m is passed in this will be the third\n   argument. f must return at a minimum an IRender or IRenderState\n   instance, this instance may implement other React life cycle\n   protocols.\n\n   cursor - an ICursor instance\n\n   m - a map the following keys are allowed:\n\n     :key        - a keyword that should be used to look up the key used by\n                   React itself when rendering sequential things.\n     :react-key  - an explicit react key\n     :fn         - a function to apply to the data before invoking f.\n     :init-state - a map of initial state to pass to the component.\n     :state      - a map of state to pass to the component, will be merged in.\n     :opts       - a map of values. Can be used to pass side information down\n                   the render tree.\n     :descriptor - a JS object of React methods, will be used to\n                   construct a React class per Om component function\n                   encountered. defaults to pure-descriptor.\n\n   Example:\n\n     (build list-of-gadgets cursor\n        {:init-state {:event-chan ...\n                      :narble ...}})\n  ", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f cursor] [f cursor m]), :arglists ([f cursor] [f cursor m]), :arglists-meta (nil nil)}}, :name om.core/build, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f cursor] [f cursor m]), :arglists ([f cursor] [f cursor m]), :arglists-meta (nil nil)}, :method-params ([f cursor] [f cursor m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 641, :end-line 641, :max-fixed-arity 3, :fn-var true, :arglists ([f cursor] [f cursor m]), :doc "Builds an Om component. Takes an IRender/IRenderState instance\n   returning function f, a cursor, and an optional third argument\n   which may be a map of build specifications.\n\n   f - is a function of 2 or 3 arguments. The first argument will be\n   the cursor and the second argument will be the owning pure node.\n   If a map of options m is passed in this will be the third\n   argument. f must return at a minimum an IRender or IRenderState\n   instance, this instance may implement other React life cycle\n   protocols.\n\n   cursor - an ICursor instance\n\n   m - a map the following keys are allowed:\n\n     :key        - a keyword that should be used to look up the key used by\n                   React itself when rendering sequential things.\n     :react-key  - an explicit react key\n     :fn         - a function to apply to the data before invoking f.\n     :init-state - a map of initial state to pass to the component.\n     :state      - a map of state to pass to the component, will be merged in.\n     :opts       - a map of values. Can be used to pass side information down\n                   the render tree.\n     :descriptor - a JS object of React methods, will be used to\n                   construct a React class per Om component function\n                   encountered. defaults to pure-descriptor.\n\n   Example:\n\n     (build list-of-gadgets cursor\n        {:init-state {:event-chan ...\n                      :narble ...}})\n  "}, render {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 44, :column 4, :end-line 44, :end-column 10, :protocol om.core/IRender, :doc nil, :arglists (quote ([this]))}, :protocol om.core/IRender, :name om.core/render, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, MapCursor {:num-fields 3, :protocols #{om.core/IValue cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection om.core/ITransact cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable om.core/ICursor cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name om.core/MapCursor, :file "resources/public/js/out/om/core.cljs", :end-column 19, :type true, :column 10, :line 360, :record false, :end-line 360, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, -value {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 73, :column 4, :end-line 73, :end-column 10, :protocol om.core/IValue, :doc nil, :arglists (quote ([x]))}, :protocol om.core/IValue, :name om.core/-value, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc nil}, IShouldUpdate {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 22, :column 14, :end-line 22, :end-column 27, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {should-update [[this next-props next-state]]}}}, :protocol-symbol true, :name om.core/IShouldUpdate, :file "resources/public/js/out/om/core.cljs", :end-column 27, :column 1, :line 22, :protocol-info {:methods {should-update [[this next-props next-state]]}}, :info nil, :end-line 22, :impls #{}, :doc nil, :jsdoc ("@interface")}, root {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 724, :column 7, :end-line 724, :end-column 11, :arglists (quote ([f value {:keys [target tx-listen path instrument], :as options}])), :doc "Take a component constructor function f, value an immutable tree of\n   associative data structures optionally an wrapped in an IAtom\n   instance, and a map of options and installs an Om/React render\n   loop.\n\n   f must return an instance that at a minimum implements IRender or\n   IRenderState (it may implement other React life cycle protocols). f\n   must take at least two arguments, the root cursor and the owning pure\n   node. A cursor is just the original data wrapped in an ICursor\n   instance which maintains path information. Only one root render\n   loop allowed per target element. om.core/root is idempotent, if\n   called again on the same target element the previous render loop\n   will be replaced.\n\n   Options may also include any key allowed by om.core/build to\n   customize f. In addition om.core/root supports the following\n   special options:\n\n   :target     - (required) a DOM element. \n   :shared     - data to be shared by all components, see om.core/get-shared\n   :tx-listen  - a function that will listen in in transactions, should\n                 take 2 arguments - the first a map containing the\n                 path, old and new state at path, old and new global\n                 state, and transaction tag if provided.\n   :instrument - a function of three arguments that if provided will\n                 intercept all calls to om.core/build. This function should\n                 correspond to the three arity version of om.core/build.\n\n   Example:\n\n   (root\n     (fn [data owner]\n       ...)\n     {:message :hello}\n     {:target js/document.body})"}, :name om.core/root, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 11, :method-params ([f value p__42350]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 724, :end-line 724, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f value {:keys [target tx-listen path instrument], :as options}])), :doc "Take a component constructor function f, value an immutable tree of\n   associative data structures optionally an wrapped in an IAtom\n   instance, and a map of options and installs an Om/React render\n   loop.\n\n   f must return an instance that at a minimum implements IRender or\n   IRenderState (it may implement other React life cycle protocols). f\n   must take at least two arguments, the root cursor and the owning pure\n   node. A cursor is just the original data wrapped in an ICursor\n   instance which maintains path information. Only one root render\n   loop allowed per target element. om.core/root is idempotent, if\n   called again on the same target element the previous render loop\n   will be replaced.\n\n   Options may also include any key allowed by om.core/build to\n   customize f. In addition om.core/root supports the following\n   special options:\n\n   :target     - (required) a DOM element. \n   :shared     - data to be shared by all components, see om.core/get-shared\n   :tx-listen  - a function that will listen in in transactions, should\n                 take 2 arguments - the first a map containing the\n                 path, old and new state at path, old and new global\n                 state, and transaction tag if provided.\n   :instrument - a function of three arguments that if provided will\n                 intercept all calls to om.core/build. This function should\n                 correspond to the three arity version of om.core/build.\n\n   Example:\n\n   (root\n     (fn [data owner]\n       ...)\n     {:message :hello}\n     {:target js/document.body})"}, IDisplayName {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 16, :column 14, :end-line 16, :end-column 26, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {display-name [[this]]}}}, :protocol-symbol true, :name om.core/IDisplayName, :file "resources/public/js/out/om/core.cljs", :end-column 26, :column 1, :line 16, :protocol-info {:methods {display-name [[this]]}}, :info nil, :end-line 16, :impls #{}, :doc nil, :jsdoc ("@interface")}, id {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 574, :column 7, :end-line 574, :end-column 9, :arglists (quote ([owner]))}, :name om.core/id, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 9, :method-params ([owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 574, :end-line 574, :max-fixed-arity 1, :fn-var true, :arglists (quote ([owner]))}, will-receive-props {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 41, :column 4, :end-line 41, :end-column 22, :protocol om.core/IWillReceiveProps, :doc nil, :arglists (quote ([this next-props]))}, :protocol om.core/IWillReceiveProps, :name om.core/will-receive-props, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 22, :method-params ([this next-props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this next-props])), :doc nil}, IGetRenderState {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 58, :column 14, :end-line 58, :end-column 29, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-get-render-state [[this] [this ks]]}}}, :protocol-symbol true, :name om.core/IGetRenderState, :file "resources/public/js/out/om/core.cljs", :end-column 29, :column 1, :line 58, :protocol-info {:methods {-get-render-state [[this] [this ks]]}}, :info nil, :end-line 58, :impls #{om.core/x42223 om.core/x42226}, :doc nil, :jsdoc ("@interface")}, update! {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 829, :column 7, :end-line 829, :end-column 14, :arglists (quote ([cursor v] [cursor korks v] [cursor korks v tag])), :doc "Like transact! but no function provided, instead a replacement\n  value is given.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([cursor v] [cursor korks v] [cursor korks v tag]), :arglists ([cursor v] [cursor korks v] [cursor korks v tag]), :arglists-meta (nil nil nil)}}, :name om.core/update!, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([cursor v] [cursor korks v] [cursor korks v tag]), :arglists ([cursor v] [cursor korks v] [cursor korks v tag]), :arglists-meta (nil nil nil)}, :method-params ([cursor v] [cursor korks v] [cursor korks v tag]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 829, :end-line 829, :max-fixed-arity 4, :fn-var true, :arglists ([cursor v] [cursor korks v] [cursor korks v tag]), :doc "Like transact! but no function provided, instead a replacement\n  value is given."}, will-update {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 35, :column 4, :end-line 35, :end-column 15, :protocol om.core/IWillUpdate, :doc nil, :arglists (quote ([this next-props next-state]))}, :protocol om.core/IWillUpdate, :name om.core/will-update, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 15, :method-params ([this next-props next-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 35, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this next-props next-state])), :doc nil}, display-name {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 17, :column 4, :end-line 17, :end-column 16, :protocol om.core/IDisplayName, :doc nil, :arglists (quote ([this]))}, :protocol om.core/IDisplayName, :name om.core/display-name, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, -empty-queue! {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 70, :column 4, :end-line 70, :end-column 17, :protocol om.core/IRenderQueue, :doc nil, :arglists (quote ([this]))}, :protocol om.core/IRenderQueue, :name om.core/-empty-queue!, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, refresh-queued {:name om.core/refresh-queued, :file "resources/public/js/out/om/core.cljs", :line 553, :column 1, :end-line 553, :end-column 30, :private true, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 553, :column 16, :end-line 553, :end-column 30, :private true}}, IGetState {:meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 55, :column 14, :end-line 55, :end-column 23, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-get-state [[this] [this ks]]}}}, :protocol-symbol true, :name om.core/IGetState, :file "resources/public/js/out/om/core.cljs", :end-column 23, :column 1, :line 55, :protocol-info {:methods {-get-state [[this] [this ks]]}}, :info nil, :end-line 55, :impls #{om.core/x42223 om.core/x42226}, :doc nil, :jsdoc ("@interface")}, ->IndexedCursor {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 434, :column 10, :end-line 434, :end-column 23, :protocols #{om.core/IValue cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection om.core/ITransact cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack om.core/ICursor cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup}, :factory :positional, :arglists (quote ([value state path]))}, :protocols #{om.core/IValue cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection om.core/ITransact cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack om.core/ICursor cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup}, :name om.core/->IndexedCursor, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 23, :method-params ([value state path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 434, :end-line 434, :max-fixed-arity 3, :fn-var true, :arglists (quote ([value state path])), :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup}}, -transact! {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/jellydb/resources/public/js/out/om/core.cljs", :line 106, :column 4, :end-line 106, :end-column 14, :protocol om.core/ITransact, :doc nil, :arglists (quote ([cursor korks f tag]))}, :protocol om.core/ITransact, :name om.core/-transact!, :variadic false, :file "resources/public/js/out/om/core.cljs", :end-column 14, :method-params ([cursor korks f tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 106, :max-fixed-arity 4, :fn-var true, :arglists (quote ([cursor korks f tag])), :doc nil}}, :require-macros {om.core om.core, dom om.dom, om.dom om.dom}, :cljs.analyzer/constants {:seen #{:old-state target :path x :new-value satisfies? :descriptor :componentDidUpdate :fn :new-state :instrument :react-key :om.core/id :key :else path :old-value :om.core/pass valid? :init-state :state :componentWillUnmount :componentWillReceiveProps :shouldComponentUpdate value or m :render nil? not :componentWillUpdate state IRender :getInitialState :opts IRenderState :om.core/index :shared :componentDidMount :tag :target :getDisplayName :componentWillMount :om.core/defer :tx-listen}, :order [:else :om.core/defer :path :old-value :new-value :old-state :new-state :tag :componentDidUpdate :componentWillUnmount :componentWillReceiveProps :shouldComponentUpdate :render :componentWillUpdate :getInitialState :componentDidMount :getDisplayName :componentWillMount :om.core/id value state path or satisfies? IRender x IRenderState :descriptor :fn :instrument :react-key :key :init-state :state :opts :om.core/index :shared valid? m :om.core/pass :target :tx-listen not nil? target]}, :doc nil}